<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog说明</title>
    <url>/2020/11/05/hello%20world/</url>
    <content><![CDATA[<p>一直想要有一个自己写东西的地方,当然也有很多这样的平台,但是自己也不是什么高手,想要边学习边分享,于是就有了这个Blog,就在这里面写一下自己学到的东西,以及想到的东西吧</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次美团打地鼠脚本编写过程 autojs多点找色学习过程</title>
    <url>/2020/11/06/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BE%8E%E5%9B%A2%E6%89%93%E5%9C%B0%E9%BC%A0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>事情的起因是女朋友最近迷恋上了手机app种水果,作为男票当然要陪她一起玩了,然后就在美团里面看到了这样一个游戏 一起打地鼠 我去试玩了一下,果然,手残的我只有一百多分.这怎么能忍,开始尝试写脚本,同时就当做学习autojs里面的找色找图函数了</p>
<a id="more"></a>

<h2 id="1-设计思路"><a href="#1-设计思路" class="headerlink" title="1,设计思路"></a>1,设计思路</h2><p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/%E6%89%93%E5%9C%B0%E9%BC%A0%E5%AF%BC%E5%9B%BE.jpg"></p>
<p>首先通过试玩,我发现是有炸弹作为干扰的,同时,会出现增加时间的道具(个人觉得这个不能浪费要吃),</p>
<p>然后思路,一开始我是准备判断特定点颜色来进行点击的,但是地鼠移动太快,我不好找色,同时也担心单点找色误判率太高,于是我把方向放在了多点找色上面</p>
<p>于是我打开了了autojs的文档,从里面找到了这样一个函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">images.findMultiColors(img, firstColor, colors[, options])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>img</td>
<td>{Image}</td>
<td>要找色的图片</td>
</tr>
<tr>
<td>firstColor</td>
<td>{number 或 string}</td>
<td>第一个点的颜色</td>
</tr>
<tr>
<td>colors</td>
<td>{Array}</td>
<td>表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]</td>
</tr>
<tr>
<td>options</td>
<td>{Object}</td>
<td>选项，包括：下面两个内容</td>
</tr>
</tbody></table>
<ul>
<li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定region选项，则找色区域为整张图片。</li>
<li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 - 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0-1.0)的换算为 similarity = (255 - threshold) / 255.</li>
</ul>
<p>函数aj给我们提供好了,剩下的就是开始写脚本了</p>
<h2 id="2-编写过程"><a href="#2-编写过程" class="headerlink" title="2,编写过程"></a>2,编写过程</h2><h3 id="2-1-初期代码"><a href="#2-1-初期代码" class="headerlink" title="2.1 ,初期代码"></a>2.1 ,初期代码</h3><p>​    找到了多点找色的函数,我第一个思路是在手机里截全屏,然后通过多点找色,找地鼠的特征点</p>
<p>然后我就开始截图,裁剪出地鼠的肚皮,然后找到了几个点,开始写代码</p>
<p>最初写出来的代码是这个样子的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    requestScreenCapture()</span><br><span class="line">&#125;); <span class="comment">//截图权限</span></span><br><span class="line">sleep(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    findds()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> screen = captureScreen(); <span class="comment">//截图</span></span><br><span class="line">    <span class="keyword">let</span> img_ds = images.findMultiColors(screen, <span class="string">&quot;#ffdfc894&quot;</span>, [</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">30</span>, <span class="string">&quot;#fff7eed1&quot;</span>],</span><br><span class="line">        [<span class="number">7</span>, -<span class="number">28</span>, <span class="string">&quot;#fff5eed2&quot;</span>],</span><br><span class="line">        [<span class="number">8</span>, -<span class="number">1</span>, <span class="string">&quot;#ffe5cd9d&quot;</span>],</span><br><span class="line">        [<span class="number">36</span>, -<span class="number">4</span>, <span class="string">&quot;#ffdabf8a&quot;</span>]</span><br><span class="line">    ], &#123;</span><br><span class="line">        threshold: [<span class="number">10</span>]</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (img_ds) &#123;</span><br><span class="line">        log(<span class="string">&#x27;找到地鼠&#x27;</span>)</span><br><span class="line">        click(img_ds.x, img_ds.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带上这串代码,我自信满满的前去挑战,没想到最后还不如我手动打出来的分数高,那我就不乐意了啊,于是开始琢磨怎么优化</p>
<h3 id="2-2-初步优化代码"><a href="#2-2-初步优化代码" class="headerlink" title="2.2 初步优化代码"></a>2.2 初步优化代码</h3><p>其实从第一段代码中就可以看到很多问题</p>
<ul>
<li>找图直接找的全屏,浪费很多资源在没必要的地方</li>
<li>因为我是寻找地鼠的肚皮,所以相似度可以适当调整,加快速度</li>
<li>点击方法可以通过press函数进一步加快速度</li>
</ul>
<p>找到一些问题那接下来就是开始优化代码</p>
<p>优化方向如下:</p>
<ul>
<li>从全屏找图优化为区域找图(要做就做干脆点,直接找12个地洞的小区域)</li>
<li>提高相似度</li>
<li>使用press</li>
</ul>
<p>后两点都很好解决,就是改个参数和函数的事情,所以这里着重讲第一点</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/IMG_20201106_220149.jpg"></p>
<p>通过单独一个红框的高和款我们可以得到两个参数  region: [x,y,宽,高 ]  </p>
<p>而且这两个参数是固定的</p>
<p>接着开始计算12个红款左上角的x,y值</p>
<p>我们可以看出来每行所有x都是相同的,每列所有y都是相同的</p>
<p>因此,这里我建了两个数组,分别是</p>
<blockquote>
<p>x=[x1,x2,x3,x4]</p>
<p>y=[y1,y2,y3]</p>
</blockquote>
<p>通过两个数组,我们可以组合出所有区域的左上角坐标</p>
<p>分别是:</p>
<ul>
<li>第一个区域(x1,y1)</li>
<li>第二个区域(x2,y1)</li>
<li>第三个区域(x3,y1)</li>
<li>第四个区域(x1,y2)</li>
<li>…………………..</li>
</ul>
<p>后面我就不一一列举了</p>
<p>然后我们就开始构建一个函数,直接把坐标传进去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findds</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> screen = captureScreen(); <span class="comment">//截图</span></span><br><span class="line">    <span class="keyword">let</span> img_ds = images.findMultiColors(screen, <span class="string">&quot;#ffdfc894&quot;</span>, [</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">30</span>, <span class="string">&quot;#fff7eed1&quot;</span>],</span><br><span class="line">        [<span class="number">7</span>, -<span class="number">28</span>, <span class="string">&quot;#fff5eed2&quot;</span>],</span><br><span class="line">        [<span class="number">8</span>, -<span class="number">1</span>, <span class="string">&quot;#ffe5cd9d&quot;</span>],</span><br><span class="line">        [<span class="number">36</span>, -<span class="number">4</span>, <span class="string">&quot;#ffdabf8a&quot;</span>]</span><br><span class="line">    ], &#123;</span><br><span class="line">        threshold: [<span class="number">50</span>],</span><br><span class="line">        region: [x,y,这里填写宽 , 这里填写高] <span class="comment">//把坐标传进这里,分别是x,y,宽高可以定义一个常量存进去</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (img_ds) &#123;</span><br><span class="line">        log(<span class="string">&#x27;找到地鼠&#x27;</span>)</span><br><span class="line">        click(img_ds.x, img_ds.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把坐标传进函数里,然后就实现了区域内的多点找色</p>
<p>同时这里我把相似度直接改成了50</p>
<p>然后开始运行一下,果然,运行起来比刚才快了很多</p>
<h3 id="2-3-寻找新道具代码"><a href="#2-3-寻找新道具代码" class="headerlink" title="2.3 寻找新道具代码"></a>2.3 寻找新道具代码</h3><p>接下来就是找时钟道具了,我们如法炮制</p>
<p>直接区域多点找色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findtime</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> screen = captureScreen(); <span class="comment">//截图</span></span><br><span class="line">    <span class="keyword">let</span> img_time = images.findMultiColors(screen, <span class="string">&quot;#ffdfc894&quot;</span>, [</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">2</span>, <span class="string">&quot;#ffece9fa&quot;</span>],</span><br><span class="line">        [<span class="number">5</span>, -<span class="number">5</span>, <span class="string">&quot;#ff794ed3&quot;</span>],</span><br><span class="line">        [<span class="number">6</span>, -<span class="number">6</span>, <span class="string">&quot;#ff7e48de&quot;</span>],</span><br><span class="line">        [<span class="number">30</span>, <span class="number">15</span>, <span class="string">&quot;#ff483390&quot;</span>],</span><br><span class="line">        [<span class="number">32</span>, <span class="number">12</span>, <span class="string">&quot;#ff4b309b&quot;</span>],</span><br><span class="line">        [<span class="number">39</span>, <span class="number">19</span>, <span class="string">&quot;#ffedeffc&quot;</span>],</span><br><span class="line">        [<span class="number">40</span>, <span class="number">16</span>, <span class="string">&quot;#ffeceefa&quot;</span>]</span><br><span class="line">    ], &#123;</span><br><span class="line">        threshold: [<span class="number">30</span>],</span><br><span class="line">        region: [x,y,这里填写宽 , 这里填写高] <span class="comment">//把坐标传进这里,分别是x,y,宽高可以定义一个常量存进去</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (img_ds) &#123;</span><br><span class="line">        log(<span class="string">&#x27;找到时钟&#x27;</span>)</span><br><span class="line">        click(img_time.x, img_time.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出和找地鼠差不多,</p>
<p>然后我们运行,但是会发现运行起来分数反而没有之前高了,其实我们很好判断,因为多了找色的步骤,所以变慢了</p>
<p>那么我们有没有优化的办法呢,这里我的思路是在找地鼠的函数里判断是否出现地鼠,,如果没有出现地鼠,在判断是否是时钟道具,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findds</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> screen = captureScreen(); <span class="comment">//截图</span></span><br><span class="line">    <span class="keyword">let</span> img_ds = images.findMultiColors(screen, <span class="string">&quot;#ffdfc894&quot;</span>, [</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">30</span>, <span class="string">&quot;#fff7eed1&quot;</span>],</span><br><span class="line">        [<span class="number">7</span>, -<span class="number">28</span>, <span class="string">&quot;#fff5eed2&quot;</span>],</span><br><span class="line">        [<span class="number">8</span>, -<span class="number">1</span>, <span class="string">&quot;#ffe5cd9d&quot;</span>],</span><br><span class="line">        [<span class="number">36</span>, -<span class="number">4</span>, <span class="string">&quot;#ffdabf8a&quot;</span>]</span><br><span class="line">    ], &#123;</span><br><span class="line">        threshold: [<span class="number">50</span>],</span><br><span class="line">        region: [x,y,这里填写宽 , 这里填写高] <span class="comment">//把坐标传进这里,分别是x,y,宽高可以定义一个常量存进去</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (img_ds) &#123;</span><br><span class="line">        log(<span class="string">&#x27;找到地鼠&#x27;</span>)</span><br><span class="line">        click(img_ds.x, img_ds.y)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">log(<span class="string">&quot;没有找到地鼠,判断是否有时钟&quot;</span>);</span><br><span class="line">findtime(img,x,y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findtime</span>(<span class="params">img,x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img_time = images.findMultiColors(screen, <span class="string">&quot;#ffdfc894&quot;</span>, [</span><br><span class="line">        [<span class="number">1</span>, -<span class="number">2</span>, <span class="string">&quot;#ffece9fa&quot;</span>],</span><br><span class="line">        [<span class="number">5</span>, -<span class="number">5</span>, <span class="string">&quot;#ff794ed3&quot;</span>],</span><br><span class="line">        [<span class="number">6</span>, -<span class="number">6</span>, <span class="string">&quot;#ff7e48de&quot;</span>],</span><br><span class="line">        [<span class="number">30</span>, <span class="number">15</span>, <span class="string">&quot;#ff483390&quot;</span>],</span><br><span class="line">        [<span class="number">32</span>, <span class="number">12</span>, <span class="string">&quot;#ff4b309b&quot;</span>],</span><br><span class="line">        [<span class="number">39</span>, <span class="number">19</span>, <span class="string">&quot;#ffedeffc&quot;</span>],</span><br><span class="line">        [<span class="number">40</span>, <span class="number">16</span>, <span class="string">&quot;#ffeceefa&quot;</span>]</span><br><span class="line">    ], &#123;</span><br><span class="line">        threshold: [<span class="number">30</span>],</span><br><span class="line">        region: [x,y,这里填写宽 , 这里填写高] <span class="comment">//把坐标传进这里,分别是x,y,宽高可以定义一个常量存进去</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (img_ds) &#123;</span><br><span class="line">        log(<span class="string">&#x27;找到时钟&#x27;</span>)</span><br><span class="line">        click(img_time.x, img_time.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就把两个函数组合起来了,同时减少了一次截图的步骤更加缩短反应时间</p>
<p>最后在加个循环直接调用函数就可以运行了</p>
<h3 id="2-4-后续优化"><a href="#2-4-后续优化" class="headerlink" title="2.4 后续优化"></a>2.4 后续优化</h3><p>至此这个小脚本已经写得差不多了,后续就是一些小优化,比如减少反应时间,优化截图的调用之类的,这些就不在这里说了,毕竟大体框架已经搞定,后续添加以及优化并不难</p>
<p>这里我直接写了个ui界面</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/Screenshot_2020-11-06-23-04-33-620_com.jpg"></p>
<p>点击开始运行之后将会在左上角弹出悬浮窗</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/Screenshot_2020-11-06-23-05-07-857_com.jpg"></p>
<p>之后就可以运行了</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3,总结"></a>3,总结</h2><p>这个脚本其实并不复杂,主要是多点找色函数的使用,通过这次脚本编写,让自己学习到了多点找色的使用方法,以及编写过程是自己对多点找色脚本的优化有了一些理解</p>
<h2 id="4-后续"><a href="#4-后续" class="headerlink" title="4,后续"></a>4,后续</h2><p>尝试了一下自己的这个脚本</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/Screenshot_2020-11-07-01-08-48-731_com.jpg"></p>
<p>其实还有能优化的地方,但是目前对我来说已经够用了,就这样吧</p>
]]></content>
      <tags>
        <tag>-脚本 -autojs</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次使用shell脚本便捷管理Hexo (未接触shell脚本的编写)</title>
    <url>/2020/11/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E4%BE%BF%E6%8D%B7%E7%AE%A1%E7%90%86Hexo-%E6%9C%AA%E6%8E%A5%E8%A7%A6shell%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<p>搭建了Hexo之后,为了在多设备使用,我把Hexo的主文件也给Git push到了自己的github的一个私人仓库里,这样就有了几个问题,首先每次换设备要反复Git push pull,(小白只会些操作),同时hexo的管理也要多次打开终端,在终端中重复输入命令,那我就想有没有更简单的方法来实现呢,这时候我就想到了一个东西,既然是终端,那应该可以直接写shell脚本吧,于是便有了今天这个文章</p>
<a id="more"></a>



<h2 id="1-小白的尝试"><a href="#1-小白的尝试" class="headerlink" title="1,小白的尝试"></a>1,小白的尝试</h2><p>因为之前没有写过shell脚本,也没有尝试过在windows运行脚本,我首先进行了一个尝试,首先在Hexo的程序文件里新建了一个文件 </p>
<p>名为     清理Hexo缓存并生成静态文件以及预览.sh </p>
<p>然后在里面打上了这段代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>然后直接保存,运行之后发现确实可以使用</p>
<p>于是我如法炮制,直接又写了几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#把Hexo程序文件git到仓库</span><br><span class="line">git add . &amp;&amp; git commit -m&quot;new&quot; &amp;&amp; git push</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#从仓库拉取Hexo文件</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#推送静态文件</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>之后就变成这样</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/shell%E8%84%9A%E6%9C%AChexo.png"></p>
<h2 id="2-尝试优化"><a href="#2-尝试优化" class="headerlink" title="2,尝试优化"></a>2,尝试优化</h2><p>这样弄成脚本运行起来确实舒服很多</p>
<p>但是一堆文件堆在目录下看起来乱糟糟的,我就想到能不能把这些文件组合起来,想到shell里面应该有if函数,我就开始去搜索资料(毕竟不会shell嘛,尝试下)</p>
<p>最后写成了这样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;请输入数字运行脚本 &quot;</span><br><span class="line">echo &quot;--------------git主程序操作-----------------&quot;</span><br><span class="line">echo &quot;1,把Hexo主程序push到仓库&quot;</span><br><span class="line">echo &quot;2,从仓库pull Hexo主程序&quot;</span><br><span class="line">echo &quot;--------------Hexo主程序相关-----------------&quot;</span><br><span class="line">echo &quot;3,清理Hexo缓存并生成静态文件&quot;</span><br><span class="line">echo &quot;4,推送blog到静态页面&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read  -p&quot;请输入要运行的命令&lt;输入数字&gt;&quot; input</span><br><span class="line"></span><br><span class="line">if (( $input == 1 )); then</span><br><span class="line">    git add . &amp;&amp; git commit -m&quot;new&quot; &amp;&amp; git push</span><br><span class="line">elif (( $input == 2)); then</span><br><span class="line">    git pull</span><br><span class="line">elif (( $input == 3)); then</span><br><span class="line">    hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">elif (( $input == 4 )); then</span><br><span class="line">    hexo d</span><br><span class="line">else</span><br><span class="line">    echo &quot;....&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">read  -p&quot;完成任务任意键结束&quot; </span><br></pre></td></tr></table></figure>



<p>毕竟有其他语言的基础写起来确实没什么意外,上网搜索了下需要用到的函数,就写出来了</p>
<p>这样最后成品就变成这样了,以后也可以添加创建新文章的命令进去,毕竟也就一句命令的事情</p>
<p><img data-src="https://gitee.com/mo-wang/pic/raw/master/img/1fb41547d1bb0c19.png"></p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3,总结"></a>3,总结</h2><p>这次写的脚本可以说是非常简单非常简单,但是确确实实方便了我,作为以前没有写过shell脚本的小白,能写出来确实挺开心的,也算是学到了一些东西</p>
<p>也希望以后能学习到shell脚本,写出实用的脚本</p>
<blockquote>
<p>参考网址:</p>
<p>read命令_Linux read 命令用法详解：从键盘读取变量值:</p>
<blockquote>
<p><a href="https://man.linuxde.net/read">https://man.linuxde.net/read</a></p>
</blockquote>
<p>Shell if else语句（详解版）</p>
<blockquote>
<p><a href="http://c.biancheng.net/view/1262.html">http://c.biancheng.net/view/1262.html</a></p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
